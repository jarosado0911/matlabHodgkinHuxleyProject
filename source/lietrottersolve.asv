function lietrottersolve(dt,clamp_index,rec_ind,filename,outputFolder)

% read radius and subset names from readSWC function
[~,~,~,~,a,~]=readswc(filename);

% need to scale radii to MICRO METERS
a = a*1e-6;
n = length(a);

% this is for make the output folder
dir = sprintf('%s',outputFolder);
mkdir(dir); mkdir(sprintf('%s/data',dir));

% Hodgkin Huxley Parameters
P = hh_params();

% Simulation Parameters
S = sim_params(dt);

u=ones(n,1).*S.vStart;  
nn=zeros(n,1); nn(:,1)=S.ni;
mm=zeros(n,1); mm(:,1)=S.mi;
hh=zeros(n,1); hh(:,1)=S.hi;

% Make sparse stencil matrices
A = stencilmaker(n,P.R,a,P.C,filename);
Id = eye(n);

% Matrix for solving SBDF Method
LHS = Id-(2/3).*dt.*A;
RHS = Id;

dLHS = decomposition(LHS);

% this preallocates a matrix for saving recorded voltage
u_rec = zeros(length((0:S.nT)),length(rec_ind));
n_rec = zeros(length((0:S.nT)),length(rec_ind));
m_rec = zeros(length((0:S.nT)),length(rec_ind));
h_rec = zeros(length((0:S.nT)),length(rec_ind));

% wrappers that match (u,s) -> F(s, a(u), b(u))
Fn = @(u,s) gates.F(s, gates.an(u), gates.bn(u));
Fm = @(u,s) gates.F(s, gates.am(u), gates.bm(u));
Fh = @(u,s) gates.F(s, gates.ah(u), gates.bh(u));

for i=0:S.nT
    
    
    % records the voltage
    for ii=1:length(rec_ind)
        u_rec(i+1,ii) = u(rec_ind(ii));  n_rec(i+1,ii) = nn(rec_ind(ii));
        m_rec(i+1,ii) = mm(rec_ind(ii)); h_rec(i+1,ii) = hh(rec_ind(ii));
    end
    
    fprintf('t= %f [s]\n',i*dt)
end

% set time values for output
t=dt*(0:S.nT);

% make a figure
figure(1)
hold on
for i=1:length(rec_ind)
    dispname = sprintf('Index = %i',rec_ind(i));
    plot(t.*1e3,u_rec(:,i)*.1e3,'DisplayName', dispname);
end

% set the figure titles
title('Voltage profiles')
xlabel('time [ms]')
ylabel('voltage [mV]')
legend('show')

% save the output recorded voltage
save(sprintf('%s/u_rec.mat',outputFolder),'u_rec');
save(sprintf('%s/n_rec.mat',outputFolder),'n_rec');
save(sprintf('%s/m_rec.mat',outputFolder),'m_rec');
save(sprintf('%s/h_rec.mat',outputFolder),'h_rec');

% save soma voltage and time voltage as .mat files
save(sprintf('%s/time.mat',dir),'t')
end